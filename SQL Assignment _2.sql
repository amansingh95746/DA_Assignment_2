--- Basic aggregate functions ---
--- Q1 ---  Retrieve the total number of rentals made in the sakila database --

SELECT 
    COUNT(*) AS total_no_of_rentals
FROM
    rental;

--- Q2 --- Find the average rental duration (in days) of movies rented from the sakila database ---

SELECT 
    AVG(DATEDIFF(return_date, rental_date)) AS average_duration_in_days
FROM
    rental;

---- String functions ---
--- Q3 --- Display the first name and last name of customers in uppercase ---

SELECT 
    UPPER(CONCAT(first_name, '     ', last_name))
FROM
    customer;

--- Q4 Extract the month from the rental date and display it alongside the rental ID ----

SELECT 
    rental_id, MONTH(rental_date) AS rental_month
FROM
    rental;

--- GROUP BY ---
--- Q5 Retrive the count of rentals for each customer (display customer ID and the count of rental). ---

SELECT 
    customer_id, COUNT(*) AS renatl_count
FROM
    rental
GROUP BY customer_id;

--- Q6 Find the total revenue generated by each store ---

SELECT 
    store.store_id, SUM(amount) AS total_revenue
FROM
    store
        LEFT JOIN
    staff ON store.store_id = staff.store_id
        LEFT JOIN
    payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;


---- join -----
--- Q7 Display the title of the movie, customer s first name, and last name who rented it. -----


SELECT 
    title AS movies, first_name, last_name
FROM
    rental
        INNER JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        INNER JOIN
    film ON inventory.film_id = film.film_id
        INNER JOIN
    customer ON rental.customer_id = customer.customer_id;

--- Q8 Retrive the name of all actor who have appeared in the film 'gone with the wind' ---

SELECT 
    CONCAT(first_name, '   ', last_name) AS Actor_name
FROM
    actor
        INNER JOIN
    film_actor ON actor.actor_id = film_actor.actor_id
        INNER JOIN
    film ON film_actor.film_id = film.film_id
WHERE
    film.title = 'gone with the wind';


---- Group By ----

---- Q1 Determine the total number of rentals for each category of movies. ---

SELECT 
    COUNT(*) AS Total_number_of_rentals, category.name
FROM
    rental
        INNER JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        INNER JOIN
    film_category ON inventory.film_id = film_category.film_id
        INNER JOIN
    category ON film_category.category_id = category.category_id
GROUP BY film_category.category_id;

--- Q2 Find the average rental rate of movies in each language.---

SELECT 
    language.name, AVG(rental_rate) AS average_rental_rate
FROM
    film
        INNER JOIN
    language ON film.language_id = language.language_id
GROUP BY language.name;

---------  joins -----

--- Q3 Retrieve the customer names along with the total amount they've spent on rentals. -----


SELECT 
    CONCAT(first_name, '    ', last_name) AS Names,
    SUM(amount) AS Total_amount_spent
FROM
    customer
        JOIN
    payment ON customer.customer_id = payment.customer_id
GROUP BY customer.first_name , last_name;

---- Q4 List the titles of movies rented by each customer in a particular city (e.g., 'London'). ----

SELECT 
    customer.customer_id,
    film.title AS movies_title,
    CONCAT(first_name, '   ', last_name) AS Name,
    city.city
FROM
    customer
        JOIN
    address ON customer.address_id = address.address_id
        JOIN
    city ON address.city_id = city.city_id
        JOIN
    rental ON customer.customer_id = rental.customer_id
        INNER JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        INNER JOIN
    film ON inventory.film_id = film.film_id
WHERE
    city.city = 'london'
ORDER BY customer.customer_id , customer.first_name , customer.last_name , film.title;


---- Advanced joins and group by -----

---- Q 5 Display the top 5 rented movies along with the number of times they've been rented. ----

--- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.---

SELECT 
    film.title AS Movies_title, COUNT(rental_id) AS Rental_count
FROM
    film
        JOIN
    inventory ON film.film_id = inventory.film_id
        JOIN
    rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 5;


---- Q6 Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). ----

SELECT 
    customer.customer_id,
    CONCAT(first_name, '   ', last_name) AS Name
FROM
    customer
        JOIN
    rental ON customer.customer_id = rental.customer_id
        JOIN
    inventory ON rental.inventory_id = inventory.inventory_id
        JOIN
    store ON inventory.store_id = store.store_id
WHERE
    store.store_id IN (1 , 2)
GROUP BY customer.customer_id , customer.first_name , customer.last_name
HAVING COUNT(DISTINCT store.store_id) = 2;















































    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
